var assert = require('assert');
var Rsync  = require('../rsync');

describe('rsync.args', function() {

    it('should return an array', function() {
        var rsync, isArray = Array.isArray;

        // default state
        rsync = new Rsync();
        assert(isArray(rsync.args()));
        assert.equal(rsync.args().length, 0);

        // with flags and options
        rsync.flags('a').set('progress');
        assert(isArray(rsync.args()));
        assert.equal(rsync.args().length, 2);
    });

    it('should combine short options', function() {
        var rsync;

        // with flags
        rsync = new Rsync().flags('avz');
        assert.equal(rsync.args().length, 1);
        assertArg(rsync.args(), '-avz');

        // with set
        rsync = new Rsync()
            .set('a')
            .set('b')
            .set('c');
        assert.equal(rsync.args().length, 1);
        assertArg(rsync.args(), '-abc');

        // with build
        rsync = Rsync.build({ flags: 'zyx' });
        assertArg(rsync.args(), '-zyx');
    });

    it('should separate long options', function() {
        var rsync = new Rsync()
            .set('progress')
            .set('from-file', '/some/path');
        var args = rsync.args();

        assert.equal(args.length, 2);
        assertArg(args, '--progress');
        assertArg(args, '--from-file="/some/path"');
    });

    xit('should escape options with arguments', function() {
        var rsync = new Rsync().set('from-file', "/some/weird file\"'s name");

    });

    xit('should add include/exclude patterns in order', function() {

    });

    it('should add multiple sources separately', function() {
        var rsync = new Rsync()
            .source('/some/path')
            .source('/some/other/path')
            .source('/another/source');
        var args = rsync.args();

        assert.equal(args.length, 3);
        assertArg(args, '/some/path');
        assertArg(args, '/some/other/path');
        assertArg(args, '/another/source');
    });

    it('should add destination after sources', function() {
        var rsync = new Rsync()
            .source('/some/path')
            .destination('remote-server:destination/path')
            .source('/another/source');
        var args = rsync.args();

        assert.equal(args.length, 3);
        assertArg(args, '/some/path');
        assertArg(args, 'remote-server:destination/path');
        assertArg(args, '/another/source');

        assert.equal(args[2], 'remote-server:destination/path');
    });

    function assertArg(args, arg) {
        assert(args.indexOf(arg) !== -1);
    }
});
